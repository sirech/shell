# -*- mode: Shell-script-*-
#
# Configuration file for git.
#
# Credit
# - http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain
# - Gary Bernhardt
# - http://yanpritzker.com/git-book/
#
# Author: Mario Fernandez

[user]
	name = Mario Fernandez
	email = mario.fernandez@xing.com
        # Set up this manually, as the email can vary between machines
        #email = username@mydomain.com

[color]
        diff = auto
        status = auto
        branch = auto
        interactive = auto
        ui = true
        pager = true

[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green

[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold

[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[core]
        editor = emacsclient
        pager = less -FRSX
        whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
        excludesfile = ~/.gitignore

[diff]
        # Make diffs shorter when moving/copying files
        rename = copy
        # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
        # instead of a/b/c/d as prefixes for patches
        mnemonicprefix = true

[branch]
        autosetuprebase = always

[merge]
        summary = true
        verbosity = 1

[push]
        default = upstream

[gc]
        auto = 1

# The abbreviations are based on SVN. Other useful commands are also
# here
[alias]

        st = status

        # commit
        ci = commit -v
        ca = commit -v -a
        amend = commit --amend

        # checkout
        co = checkout

        # cherry pick
        cp = cherry-pick -x

        # add
        aa = add --all
        au = !git add $(git ls-files -o --exclude-standard)

        # diff
        di = diff
        dh = diff HEAD
        dc = diff --cached
        w = whatchanged

        # clone
        cl = clone

        # push
        ps = push

        # pull
        pl = pull

        # rebase
        ready = rebase -i @{u}

        # log
        rdi = log --no-merges --stat @{1}..
        lg = log --graph --pretty=format':%C(yellow)%h%Cred%d%Creset %s %C(cyan) %an, %ar%Creset'
        changes = log --pretty=format:':%C(yellow)%h%Cred%d%Creset %s %C(cyan) %an, %ar%Creset' --name-status
        standup = !git log –since yesterday –author `git config user.email` –pretty=short

        # Creates/deletes the current branch at the remote origin repo
        publish = !sh -c 'CURRENT=$(git symbolic-ref HEAD | sed -e s@.*/@@) \
            && git push --set-upstream origin $CURRENT:$CURRENT'
        unpublish = !sh -c 'CURRENT=$(git symbolic-ref HEAD | sed -e s@.*/@@) \
            && git push origin :$CURRENT'

        # gitk
        kconflict = !gitk --left-right HEAD...MERGE_HEAD
        history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )

        # remote
        rem = remote

        # revert
        rv = revert
        rs = reset
        unstage = reset HEAD
        uncommit = reset --soft 'HEAD^'
        pointbranchto = reset --hard
        wipe = reset --hard HEAD

        # stash
        ss = stash                        # stash changes
        sl = stash list                   # list stashes
        sa = stash apply                  # apply stash (restore changes)
        sd = stash drop                   # drop stashes (destory changes)

        # config
        info = config --list

        # Old branches
        merged = !sh -c 'git branch --merged master | grep -v master'
        rmerged = !sh -c 'git branch -r --merged master | grep -v master'
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
